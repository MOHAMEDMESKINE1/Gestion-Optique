//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gestion_Optique.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Gestion_OptiqueEntities7 : DbContext
    {
        public Gestion_OptiqueEntities7()
            : base("name=Gestion_OptiqueEntities7")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Achat> Achat { get; set; }
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Facture> Facture { get; set; }
        public virtual DbSet<Fournisseur> Fournisseur { get; set; }
        public virtual DbSet<Mesure> Mesure { get; set; }
        public virtual DbSet<Ophtalmologue> Ophtalmologue { get; set; }
        public virtual DbSet<Produit> Produit { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Vente> Vente { get; set; }
    
        public virtual ObjectResult<AfficherAchat_Result> AfficherAchat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherAchat_Result>("AfficherAchat");
        }
    
        public virtual ObjectResult<AfficherClient_Result> AfficherClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherClient_Result>("AfficherClient");
        }
    
        public virtual ObjectResult<AfficherFacture_Result> AfficherFacture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherFacture_Result>("AfficherFacture");
        }
    
        public virtual ObjectResult<AfficherFournisseur_Result> AfficherFournisseur()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherFournisseur_Result>("AfficherFournisseur");
        }
    
        public virtual ObjectResult<AfficherMesure_Result> AfficherMesure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherMesure_Result>("AfficherMesure");
        }
    
        public virtual ObjectResult<AfficherOphtal_Result> AfficherOphtal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherOphtal_Result>("AfficherOphtal");
        }
    
        public virtual ObjectResult<AfficherProduit_Result> AfficherProduit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherProduit_Result>("AfficherProduit");
        }
    
        public virtual ObjectResult<AfficherVente_Result> AfficherVente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AfficherVente_Result>("AfficherVente");
        }
    
        public virtual int AjouterAchat(Nullable<int> qte, Nullable<int> prix, string modePaiment, Nullable<System.DateTime> dateAchat, Nullable<int> num_produit, Nullable<int> num_fournisseur)
        {
            var qteParameter = qte.HasValue ?
                new ObjectParameter("qte", qte) :
                new ObjectParameter("qte", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("prix", prix) :
                new ObjectParameter("prix", typeof(int));
    
            var modePaimentParameter = modePaiment != null ?
                new ObjectParameter("modePaiment", modePaiment) :
                new ObjectParameter("modePaiment", typeof(string));
    
            var dateAchatParameter = dateAchat.HasValue ?
                new ObjectParameter("dateAchat", dateAchat) :
                new ObjectParameter("dateAchat", typeof(System.DateTime));
    
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            var num_fournisseurParameter = num_fournisseur.HasValue ?
                new ObjectParameter("num_fournisseur", num_fournisseur) :
                new ObjectParameter("num_fournisseur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterAchat", qteParameter, prixParameter, modePaimentParameter, dateAchatParameter, num_produitParameter, num_fournisseurParameter);
        }
    
        public virtual int AjouterClient(string cIN, string nom, string prenom, Nullable<System.DateTime> dateNaissance, string telephone, string email, string adresse, string genre)
        {
            var cINParameter = cIN != null ?
                new ObjectParameter("CIN", cIN) :
                new ObjectParameter("CIN", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var dateNaissanceParameter = dateNaissance.HasValue ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(System.DateTime));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterClient", cINParameter, nomParameter, prenomParameter, dateNaissanceParameter, telephoneParameter, emailParameter, adresseParameter, genreParameter);
        }
    
        public virtual int AjouterFacture(Nullable<System.DateTime> dateFacture, Nullable<int> num_vente)
        {
            var dateFactureParameter = dateFacture.HasValue ?
                new ObjectParameter("dateFacture", dateFacture) :
                new ObjectParameter("dateFacture", typeof(System.DateTime));
    
            var num_venteParameter = num_vente.HasValue ?
                new ObjectParameter("num_vente", num_vente) :
                new ObjectParameter("num_vente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterFacture", dateFactureParameter, num_venteParameter);
        }
    
        public virtual int AjouterFournisseur(string nom, string prenom, string telephone, string email, string adresse)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterFournisseur", nomParameter, prenomParameter, telephoneParameter, emailParameter, adresseParameter);
        }
    
        public virtual int AjouterMesure(Nullable<System.DateTime> date_mesure, string mutualise, string sphere_mesure, string cylindre_mesure, Nullable<int> axe, string type_lentille, string lentille_mesure, Nullable<double> hauteur, string oeil_mesure, Nullable<int> num_ophtal, Nullable<int> num_client)
        {
            var date_mesureParameter = date_mesure.HasValue ?
                new ObjectParameter("date_mesure", date_mesure) :
                new ObjectParameter("date_mesure", typeof(System.DateTime));
    
            var mutualiseParameter = mutualise != null ?
                new ObjectParameter("mutualise", mutualise) :
                new ObjectParameter("mutualise", typeof(string));
    
            var sphere_mesureParameter = sphere_mesure != null ?
                new ObjectParameter("sphere_mesure", sphere_mesure) :
                new ObjectParameter("sphere_mesure", typeof(string));
    
            var cylindre_mesureParameter = cylindre_mesure != null ?
                new ObjectParameter("cylindre_mesure", cylindre_mesure) :
                new ObjectParameter("cylindre_mesure", typeof(string));
    
            var axeParameter = axe.HasValue ?
                new ObjectParameter("axe", axe) :
                new ObjectParameter("axe", typeof(int));
    
            var type_lentilleParameter = type_lentille != null ?
                new ObjectParameter("type_lentille", type_lentille) :
                new ObjectParameter("type_lentille", typeof(string));
    
            var lentille_mesureParameter = lentille_mesure != null ?
                new ObjectParameter("lentille_mesure", lentille_mesure) :
                new ObjectParameter("lentille_mesure", typeof(string));
    
            var hauteurParameter = hauteur.HasValue ?
                new ObjectParameter("hauteur", hauteur) :
                new ObjectParameter("hauteur", typeof(double));
    
            var oeil_mesureParameter = oeil_mesure != null ?
                new ObjectParameter("oeil_mesure", oeil_mesure) :
                new ObjectParameter("oeil_mesure", typeof(string));
    
            var num_ophtalParameter = num_ophtal.HasValue ?
                new ObjectParameter("num_ophtal", num_ophtal) :
                new ObjectParameter("num_ophtal", typeof(int));
    
            var num_clientParameter = num_client.HasValue ?
                new ObjectParameter("num_client", num_client) :
                new ObjectParameter("num_client", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterMesure", date_mesureParameter, mutualiseParameter, sphere_mesureParameter, cylindre_mesureParameter, axeParameter, type_lentilleParameter, lentille_mesureParameter, hauteurParameter, oeil_mesureParameter, num_ophtalParameter, num_clientParameter);
        }
    
        public virtual int AjouterOphtal(string nom, string prenom, string telephone, string email, string adresse)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterOphtal", nomParameter, prenomParameter, telephoneParameter, emailParameter, adresseParameter);
        }
    
        public virtual int AjouterProduit(string type, string couleur, string vision, string verre, string traitement, string taille, string marque)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var couleurParameter = couleur != null ?
                new ObjectParameter("couleur", couleur) :
                new ObjectParameter("couleur", typeof(string));
    
            var visionParameter = vision != null ?
                new ObjectParameter("vision", vision) :
                new ObjectParameter("vision", typeof(string));
    
            var verreParameter = verre != null ?
                new ObjectParameter("verre", verre) :
                new ObjectParameter("verre", typeof(string));
    
            var traitementParameter = traitement != null ?
                new ObjectParameter("traitement", traitement) :
                new ObjectParameter("traitement", typeof(string));
    
            var tailleParameter = taille != null ?
                new ObjectParameter("taille", taille) :
                new ObjectParameter("taille", typeof(string));
    
            var marqueParameter = marque != null ?
                new ObjectParameter("marque", marque) :
                new ObjectParameter("marque", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouterProduit", typeParameter, couleurParameter, visionParameter, verreParameter, traitementParameter, tailleParameter, marqueParameter);
        }
    
        public virtual int AjouteVente(Nullable<System.DateTime> dateVente, Nullable<int> prix, Nullable<int> avence, string reste, string modePaiment, string commentaire, Nullable<int> num_client, Nullable<int> num_produit)
        {
            var dateVenteParameter = dateVente.HasValue ?
                new ObjectParameter("DateVente", dateVente) :
                new ObjectParameter("DateVente", typeof(System.DateTime));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var avenceParameter = avence.HasValue ?
                new ObjectParameter("Avence", avence) :
                new ObjectParameter("Avence", typeof(int));
    
            var resteParameter = reste != null ?
                new ObjectParameter("reste", reste) :
                new ObjectParameter("reste", typeof(string));
    
            var modePaimentParameter = modePaiment != null ?
                new ObjectParameter("ModePaiment", modePaiment) :
                new ObjectParameter("ModePaiment", typeof(string));
    
            var commentaireParameter = commentaire != null ?
                new ObjectParameter("Commentaire", commentaire) :
                new ObjectParameter("Commentaire", typeof(string));
    
            var num_clientParameter = num_client.HasValue ?
                new ObjectParameter("num_client", num_client) :
                new ObjectParameter("num_client", typeof(int));
    
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AjouteVente", dateVenteParameter, prixParameter, avenceParameter, resteParameter, modePaimentParameter, commentaireParameter, num_clientParameter, num_produitParameter);
        }
    
        public virtual int ModifierAchat(Nullable<int> num_achat, Nullable<int> qte, Nullable<int> prix, string modePaiment, Nullable<System.DateTime> dateAchat, Nullable<int> num_produit, Nullable<int> num_fournisseur)
        {
            var num_achatParameter = num_achat.HasValue ?
                new ObjectParameter("num_achat", num_achat) :
                new ObjectParameter("num_achat", typeof(int));
    
            var qteParameter = qte.HasValue ?
                new ObjectParameter("qte", qte) :
                new ObjectParameter("qte", typeof(int));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("prix", prix) :
                new ObjectParameter("prix", typeof(int));
    
            var modePaimentParameter = modePaiment != null ?
                new ObjectParameter("modePaiment", modePaiment) :
                new ObjectParameter("modePaiment", typeof(string));
    
            var dateAchatParameter = dateAchat.HasValue ?
                new ObjectParameter("dateAchat", dateAchat) :
                new ObjectParameter("dateAchat", typeof(System.DateTime));
    
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            var num_fournisseurParameter = num_fournisseur.HasValue ?
                new ObjectParameter("num_fournisseur", num_fournisseur) :
                new ObjectParameter("num_fournisseur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierAchat", num_achatParameter, qteParameter, prixParameter, modePaimentParameter, dateAchatParameter, num_produitParameter, num_fournisseurParameter);
        }
    
        public virtual int ModifierClient(Nullable<int> numclient, string cIN, string nom, string prenom, Nullable<System.DateTime> dateNaissance, string telephone, string email, string adresse, string genre)
        {
            var numclientParameter = numclient.HasValue ?
                new ObjectParameter("numclient", numclient) :
                new ObjectParameter("numclient", typeof(int));
    
            var cINParameter = cIN != null ?
                new ObjectParameter("CIN", cIN) :
                new ObjectParameter("CIN", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var dateNaissanceParameter = dateNaissance.HasValue ?
                new ObjectParameter("DateNaissance", dateNaissance) :
                new ObjectParameter("DateNaissance", typeof(System.DateTime));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierClient", numclientParameter, cINParameter, nomParameter, prenomParameter, dateNaissanceParameter, telephoneParameter, emailParameter, adresseParameter, genreParameter);
        }
    
        public virtual int ModifierFacture(Nullable<int> num_facture, Nullable<System.DateTime> dateFacture, Nullable<int> num_vente)
        {
            var num_factureParameter = num_facture.HasValue ?
                new ObjectParameter("num_facture", num_facture) :
                new ObjectParameter("num_facture", typeof(int));
    
            var dateFactureParameter = dateFacture.HasValue ?
                new ObjectParameter("dateFacture", dateFacture) :
                new ObjectParameter("dateFacture", typeof(System.DateTime));
    
            var num_venteParameter = num_vente.HasValue ?
                new ObjectParameter("num_vente", num_vente) :
                new ObjectParameter("num_vente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierFacture", num_factureParameter, dateFactureParameter, num_venteParameter);
        }
    
        public virtual int ModifierFournisseur(Nullable<int> num_fournisseur, string nom, string prenom, string telephone, string email, string adresse)
        {
            var num_fournisseurParameter = num_fournisseur.HasValue ?
                new ObjectParameter("num_fournisseur", num_fournisseur) :
                new ObjectParameter("num_fournisseur", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierFournisseur", num_fournisseurParameter, nomParameter, prenomParameter, telephoneParameter, emailParameter, adresseParameter);
        }
    
        public virtual int ModifierMesure(Nullable<System.DateTime> date_mesure, string mutualise, string sphere_mesure, string cylindre_mesure, Nullable<int> axe, string type_lentille, string lentille_mesure, Nullable<double> hauteur, string oeil_mesure, Nullable<int> num_ophtal, Nullable<int> num_client)
        {
            var date_mesureParameter = date_mesure.HasValue ?
                new ObjectParameter("date_mesure", date_mesure) :
                new ObjectParameter("date_mesure", typeof(System.DateTime));
    
            var mutualiseParameter = mutualise != null ?
                new ObjectParameter("mutualise", mutualise) :
                new ObjectParameter("mutualise", typeof(string));
    
            var sphere_mesureParameter = sphere_mesure != null ?
                new ObjectParameter("sphere_mesure", sphere_mesure) :
                new ObjectParameter("sphere_mesure", typeof(string));
    
            var cylindre_mesureParameter = cylindre_mesure != null ?
                new ObjectParameter("cylindre_mesure", cylindre_mesure) :
                new ObjectParameter("cylindre_mesure", typeof(string));
    
            var axeParameter = axe.HasValue ?
                new ObjectParameter("axe", axe) :
                new ObjectParameter("axe", typeof(int));
    
            var type_lentilleParameter = type_lentille != null ?
                new ObjectParameter("type_lentille", type_lentille) :
                new ObjectParameter("type_lentille", typeof(string));
    
            var lentille_mesureParameter = lentille_mesure != null ?
                new ObjectParameter("lentille_mesure", lentille_mesure) :
                new ObjectParameter("lentille_mesure", typeof(string));
    
            var hauteurParameter = hauteur.HasValue ?
                new ObjectParameter("hauteur", hauteur) :
                new ObjectParameter("hauteur", typeof(double));
    
            var oeil_mesureParameter = oeil_mesure != null ?
                new ObjectParameter("oeil_mesure", oeil_mesure) :
                new ObjectParameter("oeil_mesure", typeof(string));
    
            var num_ophtalParameter = num_ophtal.HasValue ?
                new ObjectParameter("num_ophtal", num_ophtal) :
                new ObjectParameter("num_ophtal", typeof(int));
    
            var num_clientParameter = num_client.HasValue ?
                new ObjectParameter("num_client", num_client) :
                new ObjectParameter("num_client", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierMesure", date_mesureParameter, mutualiseParameter, sphere_mesureParameter, cylindre_mesureParameter, axeParameter, type_lentilleParameter, lentille_mesureParameter, hauteurParameter, oeil_mesureParameter, num_ophtalParameter, num_clientParameter);
        }
    
        public virtual int ModifierOphtal(Nullable<int> num_ophtal, string nom, string prenom, string telephone, string email, string adresse)
        {
            var num_ophtalParameter = num_ophtal.HasValue ?
                new ObjectParameter("num_ophtal", num_ophtal) :
                new ObjectParameter("num_ophtal", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var adresseParameter = adresse != null ?
                new ObjectParameter("Adresse", adresse) :
                new ObjectParameter("Adresse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierOphtal", num_ophtalParameter, nomParameter, prenomParameter, telephoneParameter, emailParameter, adresseParameter);
        }
    
        public virtual int ModifierProduit(Nullable<int> num_produit, string type, string couleur, string vision, string verre, string traitement, string taille, string marque)
        {
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var couleurParameter = couleur != null ?
                new ObjectParameter("couleur", couleur) :
                new ObjectParameter("couleur", typeof(string));
    
            var visionParameter = vision != null ?
                new ObjectParameter("vision", vision) :
                new ObjectParameter("vision", typeof(string));
    
            var verreParameter = verre != null ?
                new ObjectParameter("verre", verre) :
                new ObjectParameter("verre", typeof(string));
    
            var traitementParameter = traitement != null ?
                new ObjectParameter("traitement", traitement) :
                new ObjectParameter("traitement", typeof(string));
    
            var tailleParameter = taille != null ?
                new ObjectParameter("taille", taille) :
                new ObjectParameter("taille", typeof(string));
    
            var marqueParameter = marque != null ?
                new ObjectParameter("marque", marque) :
                new ObjectParameter("marque", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierProduit", num_produitParameter, typeParameter, couleurParameter, visionParameter, verreParameter, traitementParameter, tailleParameter, marqueParameter);
        }
    
        public virtual int ModifierVente(Nullable<int> num_vente, Nullable<System.DateTime> dateVente, Nullable<int> prix, Nullable<int> avence, string reste, string modePaiment, string commentaire, Nullable<int> num_client, Nullable<int> num_produit)
        {
            var num_venteParameter = num_vente.HasValue ?
                new ObjectParameter("num_vente", num_vente) :
                new ObjectParameter("num_vente", typeof(int));
    
            var dateVenteParameter = dateVente.HasValue ?
                new ObjectParameter("DateVente", dateVente) :
                new ObjectParameter("DateVente", typeof(System.DateTime));
    
            var prixParameter = prix.HasValue ?
                new ObjectParameter("Prix", prix) :
                new ObjectParameter("Prix", typeof(int));
    
            var avenceParameter = avence.HasValue ?
                new ObjectParameter("Avence", avence) :
                new ObjectParameter("Avence", typeof(int));
    
            var resteParameter = reste != null ?
                new ObjectParameter("reste", reste) :
                new ObjectParameter("reste", typeof(string));
    
            var modePaimentParameter = modePaiment != null ?
                new ObjectParameter("ModePaiment", modePaiment) :
                new ObjectParameter("ModePaiment", typeof(string));
    
            var commentaireParameter = commentaire != null ?
                new ObjectParameter("Commentaire", commentaire) :
                new ObjectParameter("Commentaire", typeof(string));
    
            var num_clientParameter = num_client.HasValue ?
                new ObjectParameter("num_client", num_client) :
                new ObjectParameter("num_client", typeof(int));
    
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifierVente", num_venteParameter, dateVenteParameter, prixParameter, avenceParameter, resteParameter, modePaimentParameter, commentaireParameter, num_clientParameter, num_produitParameter);
        }
    
        public virtual ObjectResult<RechercherAchatNumA_Result> RechercherAchatNumA(Nullable<int> num_achat)
        {
            var num_achatParameter = num_achat.HasValue ?
                new ObjectParameter("num_achat", num_achat) :
                new ObjectParameter("num_achat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherAchatNumA_Result>("RechercherAchatNumA", num_achatParameter);
        }
    
        public virtual ObjectResult<RechercherAchatNumF_Result> RechercherAchatNumF(Nullable<int> num_fournisseur)
        {
            var num_fournisseurParameter = num_fournisseur.HasValue ?
                new ObjectParameter("num_fournisseur", num_fournisseur) :
                new ObjectParameter("num_fournisseur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherAchatNumF_Result>("RechercherAchatNumF", num_fournisseurParameter);
        }
    
        public virtual ObjectResult<RechercherClientCIN_Result> RechercherClientCIN(string cIN)
        {
            var cINParameter = cIN != null ?
                new ObjectParameter("CIN", cIN) :
                new ObjectParameter("CIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherClientCIN_Result>("RechercherClientCIN", cINParameter);
        }
    
        public virtual ObjectResult<RechercherClientNom_Result> RechercherClientNom(string nom)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherClientNom_Result>("RechercherClientNom", nomParameter);
        }
    
        public virtual ObjectResult<RechercherFactureDate_Result> RechercherFactureDate(Nullable<System.DateTime> dateFacture)
        {
            var dateFactureParameter = dateFacture.HasValue ?
                new ObjectParameter("dateFacture", dateFacture) :
                new ObjectParameter("dateFacture", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherFactureDate_Result>("RechercherFactureDate", dateFactureParameter);
        }
    
        public virtual ObjectResult<RechercherFactureNum_Result> RechercherFactureNum(Nullable<int> num_facture)
        {
            var num_factureParameter = num_facture.HasValue ?
                new ObjectParameter("num_facture", num_facture) :
                new ObjectParameter("num_facture", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherFactureNum_Result>("RechercherFactureNum", num_factureParameter);
        }
    
        public virtual ObjectResult<RechercherForunisseurNom_Result> RechercherForunisseurNom(string nomF)
        {
            var nomFParameter = nomF != null ?
                new ObjectParameter("nomF", nomF) :
                new ObjectParameter("nomF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherForunisseurNom_Result>("RechercherForunisseurNom", nomFParameter);
        }
    
        public virtual ObjectResult<RechercherMesureDate_Result> RechercherMesureDate(Nullable<System.DateTime> date_mesure)
        {
            var date_mesureParameter = date_mesure.HasValue ?
                new ObjectParameter("date_mesure", date_mesure) :
                new ObjectParameter("date_mesure", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherMesureDate_Result>("RechercherMesureDate", date_mesureParameter);
        }
    
        public virtual ObjectResult<RechercherMesureNum_Result> RechercherMesureNum(Nullable<int> num_mesure)
        {
            var num_mesureParameter = num_mesure.HasValue ?
                new ObjectParameter("num_mesure", num_mesure) :
                new ObjectParameter("num_mesure", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherMesureNum_Result>("RechercherMesureNum", num_mesureParameter);
        }
    
        public virtual ObjectResult<rechercherOphtalAdresse_Result> rechercherOphtalAdresse(string adresse)
        {
            var adresseParameter = adresse != null ?
                new ObjectParameter("adresse", adresse) :
                new ObjectParameter("adresse", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rechercherOphtalAdresse_Result>("rechercherOphtalAdresse", adresseParameter);
        }
    
        public virtual ObjectResult<RechercherOphtalNom_Result> RechercherOphtalNom(string nom)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherOphtalNom_Result>("RechercherOphtalNom", nomParameter);
        }
    
        public virtual ObjectResult<RechercherProduitNum_Result> RechercherProduitNum(Nullable<int> num_produit)
        {
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherProduitNum_Result>("RechercherProduitNum", num_produitParameter);
        }
    
        public virtual ObjectResult<RechercherProduitType_Result> RechercherProduitType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherProduitType_Result>("RechercherProduitType", typeParameter);
        }
    
        public virtual ObjectResult<RechercherVenteDate_Result> RechercherVenteDate(Nullable<System.DateTime> dateVente)
        {
            var dateVenteParameter = dateVente.HasValue ?
                new ObjectParameter("dateVente", dateVente) :
                new ObjectParameter("dateVente", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherVenteDate_Result>("RechercherVenteDate", dateVenteParameter);
        }
    
        public virtual ObjectResult<RechercherVenteNomCli_Result> RechercherVenteNomCli(string nom_cli)
        {
            var nom_cliParameter = nom_cli != null ?
                new ObjectParameter("nom_cli", nom_cli) :
                new ObjectParameter("nom_cli", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechercherVenteNomCli_Result>("RechercherVenteNomCli", nom_cliParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SupprimerAchat(Nullable<int> num_achat)
        {
            var num_achatParameter = num_achat.HasValue ?
                new ObjectParameter("num_achat", num_achat) :
                new ObjectParameter("num_achat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerAchat", num_achatParameter);
        }
    
        public virtual int SupprimerClient(string cIN)
        {
            var cINParameter = cIN != null ?
                new ObjectParameter("CIN", cIN) :
                new ObjectParameter("CIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerClient", cINParameter);
        }
    
        public virtual int SupprimerFacture(Nullable<int> num_facture)
        {
            var num_factureParameter = num_facture.HasValue ?
                new ObjectParameter("num_facture", num_facture) :
                new ObjectParameter("num_facture", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerFacture", num_factureParameter);
        }
    
        public virtual int SupprimerFournisseur(string nom)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerFournisseur", nomParameter);
        }
    
        public virtual int SupprimerMesure(Nullable<int> num_client)
        {
            var num_clientParameter = num_client.HasValue ?
                new ObjectParameter("num_client", num_client) :
                new ObjectParameter("num_client", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerMesure", num_clientParameter);
        }
    
        public virtual int SupprimerOphtal(string nom)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerOphtal", nomParameter);
        }
    
        public virtual int SupprimerProduit(Nullable<int> num_produit)
        {
            var num_produitParameter = num_produit.HasValue ?
                new ObjectParameter("num_produit", num_produit) :
                new ObjectParameter("num_produit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerProduit", num_produitParameter);
        }
    
        public virtual int SupprimerVente(Nullable<int> num_vente)
        {
            var num_venteParameter = num_vente.HasValue ?
                new ObjectParameter("num_vente", num_vente) :
                new ObjectParameter("num_vente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupprimerVente", num_venteParameter);
        }
    }
}
